#
# %CopyrightBegin%
#
# Copyright Ericsson AB 1996-2015. All Rights Reserved.
#
# The contents of this file are subject to the Erlang Public License,
# Version 1.1, (the "License"); you may not use this file except in
# compliance with the License. You should have received a copy of the
# Erlang Public License along with this software. If not, it can be
# retrieved online at http://www.erlang.org/.
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
#
# %CopyrightEnd%
#

# The target of the parent makefile will leak in here unless we override it
override TARGET=@TARGET@
include ../../vsn.mk
# -include $(TARGET)/gen_git_version.mk

# ----------------------------------------------------
#       Version
# ----------------------------------------------------

OTP_VERSION = @OTP_VERSION@
SYSTEM_VSN = @SYSTEM_VSN@
OTP_RELEASE = @OTP_RELEASE@

# ----------------------------------------------------
#	Cross Compiling
# ----------------------------------------------------
CROSS_COMPILING = @CROSS_COMPILING@

ENABLE_ALLOC_TYPE_VARS = @ENABLE_ALLOC_TYPE_VARS@
HIPE_ENABLED=@HIPE_ENABLED@
USE_VM_PROBES=@USE_VM_PROBES@
LIBS = @LIBS@
NO_INLINE_FUNCTIONS=false
OPCODE_TABLES = $(ERL_TOP)/lib/compiler/src/genop.tab ../beam/ops.tab

DEBUG_CFLAGS = @DEBUG_CFLAGS@
CONFIGURE_CFLAGS = @CFLAGS@

#
# Run this make file with TYPE set to the type of emulator you want.
# Different versions of the emulator for different uses. The default
# is "debug". For a normal version use "opt".
#
DEFS=@DEFS@ -DDISABLE_CHILD_WAITER_THREAD
THR_DEFS=@EMU_THR_DEFS@
THR_LIB_NAME=@EMU_THR_LIB_NAME@
M4FLAGS=-I ../
CREATE_DIRS=

LDFLAGS=@LDFLAGS@
OMIT_OMIT_FP=no

ifeq ($(TYPE),debug)
PURIFY =
TYPEMARKER = .debug
TYPE_FLAGS = $(DEBUG_CFLAGS) -DDEBUG
ENABLE_ALLOC_TYPE_VARS += debug
ifeq ($(TARGET),win32)
TYPE_FLAGS += -DNO_JUMP_TABLE
LDFLAGS += -g
endif
else

ifeq ($(TYPE),purify)
PURIFY = purify $(PURIFY_BUILD_OPTIONS)
TYPEMARKER = .purify
TYPE_FLAGS = $(DEBUG_CFLAGS) -DPURIFY -DNO_JUMP_TABLE
ENABLE_ALLOC_TYPE_VARS += purify
else

ifeq ($(TYPE),quantify)
PURIFY = quantify $(QUANTIFY_BUILD_OPTIONS)
TYPEMARKER = .quantify
ENABLE_ALLOC_TYPE_VARS += quantify
TYPE_FLAGS = @CFLAGS@ -g -O2 -DQUANTIFY -DNO_JUMP_TABLE
else

ifeq ($(TYPE),purecov)
PURIFY = purecov --follow-child-processes=yes $(PURECOV_BUILD_OPTIONS)
TYPEMARKER = .purecov
TYPE_FLAGS = $(DEBUG_CFLAGS) -DPURECOV -DNO_JUMP_TABLE
ENABLE_ALLOC_TYPE_VARS += purecov
else

ifeq ($(TYPE),gcov)
PURIFY = 
TYPEMARKER = .gcov
TYPE_FLAGS = $(DEBUG_CFLAGS) -DERTS_GCOV -DNO_JUMP_TABLE -fprofile-arcs -ftest-coverage -O0 -DERTS_CAN_INLINE=0 -DERTS_INLINE=
ifneq ($(findstring solaris,$(TARGET)),solaris)
LIBS += -lgcov
endif
ENABLE_ALLOC_TYPE_VARS += debug
else

ifeq ($(TYPE),valgrind)
PURIFY = 
TYPEMARKER = .valgrind
TYPE_FLAGS = $(DEBUG_CFLAGS) -DVALGRIND -DNO_JUMP_TABLE
ENABLE_ALLOC_TYPE_VARS += valgrind
else

ifeq ($(TYPE),gprof)
PURIFY = 
TYPEMARKER = .gprof
TYPE_FLAGS = @CFLAGS@ -DGPROF -pg -DERTS_CAN_INLINE=0 -DERTS_INLINE=
LDFLAGS += -pg
ENABLE_ALLOC_TYPE_VARS += gprof
NO_INLINE_FUNCTIONS=true
else

ifeq ($(TYPE),lcnt)
PURIFY = 
TYPEMARKER = .lcnt
TYPE_FLAGS = @CFLAGS@ -DERTS_ENABLE_LOCK_COUNT
else

ifeq ($(TYPE),frmptr)
PURIFY = 
OMIT_OMIT_FP=yes
TYPEMARKER = .frmptr
TYPE_FLAGS = @CFLAGS@ -DERTS_FRMPTR
else

# If type isn't one of the above, it *is* opt type...
override TYPE=opt
PURIFY =
TYPEMARKER =
TYPE_FLAGS = @CFLAGS@
endif
endif
endif
endif
endif
endif
endif
endif
endif

comma:=,
space:=
space+=

#
# NOTE: When adding a new type update ERL_BUILD_TYPE_MARKER in sys/unix/sys.c
#

ifeq ($(FLAVOR),plain)
FLAVOR_MARKER=
FLAVOR_FLAGS=
ENABLE_ALLOC_TYPE_VARS += nofrag
M4FLAGS +=
else

# If flavor isn't one of the above, it *is* smp flavor...
override FLAVOR=smp
FLAVOR_MARKER=.smp
FLAVOR_FLAGS=-DERTS_SMP
ENABLE_ALLOC_TYPE_VARS += smp nofrag
M4FLAGS += -DERTS_SMP=1

endif

TF_MARKER=$(TYPEMARKER)$(FLAVOR_MARKER)

ifeq ($(FLAVOR)-@ERTS_BUILD_SMP_EMU@,smp-no)
VOID_EMULATOR = '*** SMP emulator disabled by configure'
else
ifeq ($(TYPE)-@HAVE_VALGRIND@,valgrind-no)
VOID_EMULATOR = '*** valgrind emulator disabled by configure'
else
VOID_EMULATOR =
endif
endif

OPSYS=@OPSYS@
sol2CFLAGS=
linuxCFLAGS=
darwinCFLAGS=-DDARWIN
noopsysCFLAGS=
OPSYSCFLAGS=$($(OPSYS)CFLAGS)
ARCH=@ARCH@

SLAVE_FLAGS=-DERTS_SLAVE

#
#
#
SHELL   = /bin/sh
CC      = @CC@
GCC     = @GCC@
EMU_CC  = @EMU_CC@
WFLAGS  = @WFLAGS@
CFLAGS  = @STATIC_CFLAGS@ $(TYPE_FLAGS) $(FLAVOR_FLAGS) $(SLAVE_FLAGS) $(DEFS) \
	  $(WFLAGS) $(THR_DEFS) $(GIT_VSN)
LD      = @LD@
PERL    = @PERL@
RM	= @RM@
OBJCOPY = @OBJCOPY@
SED     = @SED@
EGREP   = @EGREP@

# ----------------------------------------------------
#	Output
# ----------------------------------------------------
include $(ERL_TOP)/make/output.mk

objcopy_verbose_0 = @echo " OBJCOPY"$@;
objcopy_verbose = $(objcopy_verbose_$(V))
V_OBJCOPY = $(objcopy_verbose)$(OBJCOPY)

LIB_PREFIX=lib
LIB_SUFFIX=.a

CFLAGS += -Werror=implicit-function-declaration

ifeq (@EMU_LOCK_CHECKING@,yes)
NO_INLINE_FUNCTIONS=true
endif

ifeq ($(TYPE),opt)
ifndef OPT_LEVEL
OPT_LEVEL=-O2
endif
CFLAGS += $(OPT_LEVEL)
endif

ifeq ($(GCC),yes)
ifeq ($(NO_INLINE_FUNCTIONS),true)
GEN_OPT_FLGS = $(OPT_LEVEL) -fno-inline-functions
else
ifeq ($(OMIT_OMIT_FP),yes)
GEN_OPT_FLGS = $(OPT_LEVEL) -fno-omit-frame-pointer
else
GEN_OPT_FLGS = $(OPT_LEVEL) -fomit-frame-pointer
endif
endif
UNROLL_FLG = -funroll-loops
endif

ifeq ($(GCC),yes)
# Since things misbehave if the shared memory section is larger than 1MiB, we
# apply some gentle optimisations even during debug builds

# We'd like to use Og, but it triggers a bug in the Epiphany backend
# (https://github.com/adapteva/epiphany-sdk/issues/53). Instead, we use O1 and
# explicitly disable the optimisers that are in O1 but not Og.

# The difference between Og and O1 on e-gcc 4.8.2 2015.1 is
# -finline-functions-called-once and -ftree-sra
DEBUG_CFLAGS+= -O1 -fno-omit-frame-pointer -fno-web \
	-fno-inline-functions-called-once -fno-tree-sra

# -fgcse-las can sometimes save us from the fact that the 2015.01 FPGA binary is
# buggy and does not actually provide guarantee 2 from "4.2 Memory Order Model"
# ("Load operations using data previously written use the updated values.") when
# a load immediately follows a store. -fgcse-las allows the compiler to reuse
# the written value instead of reading it again (assuming it can prove the
# addresses are the same), thus avoiding this problem. A more robust workaround
# could be to run a pass that inserts a "nop" between loads and stores that
# can't be proven not to alias.
CFLAGS+= -fgcse -fgcse-las
endif


DEPLIBS =

LIBSCTP =

#
# ethread library
#
ETHR_THR_LIB_BASE_DIR=@ETHR_THR_LIB_BASE_DIR@

ERTS_INTERNAL_LIB_OBJS = \
	$(OBJDIR)/erl_printf_format.o \
	$(OBJDIR)/erl_printf.o \
	$(OBJDIR)/erl_misc_utils.o

ifneq ($(strip $(THR_LIB_NAME)),)
ERTS_INTERNAL_LIB_OBJS += \
	$(OBJDIR)/ethread.o \
	$(OBJDIR)/ethr_atomics.o \
	$(OBJDIR)/ethr_aux.o \
	$(OBJDIR)/ethr_mutex.o \
	$(OBJDIR)/ethr_event.o
endif

TTF_DIR=$(TARGET)/$(TYPE)/$(FLAVOR)
CREATE_DIRS += $(TTF_DIR)

# create obj dir for emulator

OBJDIR = obj/$(TTF_DIR)
CREATE_DIRS += $(OBJDIR)

BINDIR = $(ERL_TOP)/bin/$(TARGET)
CREATE_DIRS += $(BINDIR)

ERLANG_OSTYPE = @ERLANG_OSTYPE@
ENABLE_ALLOC_TYPE_VARS += @ERLANG_OSTYPE@

EMULATOR_EXECUTABLE = slave$(TF_MARKER)

# ----------------------------------------------------------------------

.PHONY: all
ifdef VOID_EMULATOR
all:
	@echo $(VOID_EMULATOR)' - omitted target all'
else
all: $(BINDIR)/$(EMULATOR_EXECUTABLE).srec
ifeq ($(OMIT_OMIT_FP),yes)
	@echo '* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *'
	@echo '* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *'
	@echo '* *                                                         * *'
	@echo '* * NOTE: Omit frame pointer optimization has been omitted  * *'
	@echo '* *                                                         * *'
	@echo '* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *'
	@echo '* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *'
endif
endif

.PHONY: clean
clean:
	$(RM) -f $(GENERATE)
	$(RM) -f src_copied/*.c
	$(RM) -rf $(TARGET)/*.c $(TARGET)/*.h $(TARGET)/*-GENERATED
	$(RM) -rf $(TARGET)/*/*
	$(RM) -rf obj/$(TARGET)
	$(RM) -rf bin/$(TARGET)
	$(RM) -f $(BINDIR)/$(EMULATOR_EXECUTABLE) $(BINDIR)/$(EMULATOR_EXECUTABLE).srec

.PHONY: docs
docs:

# ----------------------------------------------------------------------
include $(ERL_TOP)/make/otp_release_targets.mk

# ----------------------------------------------------------------------
# Generated source code. Put in $(TARGET) directory
#

_create_dirs := $(shell mkdir -p $(CREATE_DIRS))


# has to be run after _create_dirs
# We force this to be run every time this makefile is executed
TMPVAR := $(shell LANG=C $(PERL) ../utils/make_compiler_flags -o $(TTF_DIR)/erl_compile_flags.h -f CONFIG_H "$(ERL_TOP)/erts/$(TARGET)/config.h" -v CFLAGS "$(CFLAGS)" -v LDFLAGS "$(LDFLAGS)")

GENERATE =
HIPE_ASM =

ifdef HIPE_ENABLED
HIPE_ASM +=	$(TTF_DIR)/hipe_x86_asm.h \
		$(TTF_DIR)/hipe_amd64_asm.h \
		$(TTF_DIR)/hipe_sparc_asm.h \
		$(TTF_DIR)/hipe_ppc_asm.h \
		$(TTF_DIR)/hipe_epiphany_asm.h \
		$(TTF_DIR)/hipe_arm_asm.h

GENERATE +=	$(HIPE_ASM) \
		$(TTF_DIR)/hipe_literals.h \
		$(BINDIR)/hipe_mkliterals$(TF_MARKER)

OPCODE_TABLES += ../hipe/hipe_ops.tab
endif

$(TTF_DIR)/beam_cold.h \
$(TTF_DIR)/beam_hot.h \
$(TTF_DIR)/beam_opcodes.c \
$(TTF_DIR)/beam_opcodes.h \
$(TTF_DIR)/beam_pred_funcs.h \
$(TTF_DIR)/beam_tr_funcs.h \
	: $(TTF_DIR)/OPCODES-GENERATED
$(TTF_DIR)/OPCODES-GENERATED: $(OPCODE_TABLES) ../utils/beam_makeops
	$(gen_verbose)LANG=C $(PERL) ../utils/beam_makeops \
		-wordsize @EXTERNAL_WORD_SIZE@ \
		-outdir $(TTF_DIR) \
		-DUSE_VM_PROBES=$(if $(USE_VM_PROBES),1,0) \
		-emulator $(OPCODE_TABLES) && echo $? >$(TTF_DIR)/OPCODES-GENERATED
GENERATE += $(TTF_DIR)/OPCODES-GENERATED

# bif and atom table
ATOMS=	../beam/atom.names
BIFS =	../beam/bif.tab
ifdef HIPE_ENABLED
HIPE_ARCH64_TAB=../hipe/hipe_bif64.tab
HIPE_x86_TAB=../hipe/hipe_x86.tab
HIPE_amd64_TAB=../hipe/hipe_amd64.tab $(HIPE_ARCH64_TAB)
HIPE_ultrasparc_TAB=../hipe/hipe_sparc.tab
HIPE_ppc_TAB=../hipe/hipe_ppc.tab
HIPE_ppc64_TAB=../hipe/hipe_ppc64.tab $(HIPE_ARCH64_TAB)
HIPE_arm_TAB=../hipe/hipe_arm.tab
HIPE_epiphany_TAB=../hipe/hipe_epiphany.tab
HIPE_ARCH_TAB=$(HIPE_$(ARCH)_TAB) $(HIPE_arm_TAB)
ifndef MASTER_ARCH
MASTER_ARCH=arm # << ETODO: actually convey master arch info
endif
HIPE_MASTER_ARCH_TAB=$(HIPE_$(MASTER_ARCH)_TAB)
BIFS += ../hipe/hipe_bif0.tab ../hipe/hipe_bif1.tab ../hipe/hipe_bif2.tab \
	$(HIPE_ARCH_TAB) $(HIPE_MASTER_ARCH_TAB)
ifdef USE_PERFCTR
BIFS += ../hipe/hipe_perfctr.tab
endif
endif

$(TARGET)/erl_bif_table.c \
$(TARGET)/erl_bif_table.h \
$(TARGET)/erl_bif_wrap.c \
$(TARGET)/erl_bif_list.h \
$(TARGET)/erl_atom_table.c \
$(TARGET)/erl_atom_table.h \
$(TARGET)/erl_pbifs.c \
	: $(TARGET)/TABLES-GENERATED
$(TARGET)/TABLES-GENERATED: $(ATOMS) $(BIFS) ../utils/make_tables
	$(gen_verbose)LANG=C $(PERL) ../utils/make_tables -src $(TARGET) -include $(TARGET)\
		$(ATOMS) $(BIFS) && echo $? >$(TARGET)/TABLES-GENERATED
GENERATE += $(TARGET)/TABLES-GENERATED

$(TTF_DIR)/erl_alloc_types.h: ../beam/erl_alloc.types ../utils/make_alloc_types
	$(gen_verbose)LANG=C $(PERL) ../utils/make_alloc_types -src $< -dst $@ $(ENABLE_ALLOC_TYPE_VARS)
GENERATE += $(TTF_DIR)/erl_alloc_types.h

# version include file
$(TARGET)/erl_version.h: ../../vsn.mk
	$(gen_verbose)LANG=C $(PERL) ../utils/make_version -o $@ $(SYSTEM_VSN) $(OTP_VERSION) $(VSN)$(SERIALNO) $(TARGET)
GENERATE += $(TARGET)/erl_version.h


# Preloaded code.
# 
# This list must be consistent with PRE_LOADED_MODULES in
# erts/preloaded/src/Makefile.
PRELOAD_OBJ = $(OBJDIR)/preload.o
PRELOAD_SRC = $(TARGET)/preload.c
$(PRELOAD_SRC): $(ERL_TOP)/erts/preloaded/ebin/otp_ring0.beam \
			$(ERL_TOP)/erts/preloaded/ebin/init.beam \
			$(ERL_TOP)/erts/preloaded/ebin/prim_eval.beam \
			$(ERL_TOP)/erts/preloaded/ebin/prim_inet.beam \
			$(ERL_TOP)/erts/preloaded/ebin/prim_file.beam \
			$(ERL_TOP)/erts/preloaded/ebin/zlib.beam \
			$(ERL_TOP)/erts/preloaded/ebin/prim_zip.beam \
			$(ERL_TOP)/erts/preloaded/ebin/erl_prim_loader.beam \
			$(ERL_TOP)/erts/preloaded/ebin/erlang.beam \
			$(ERL_TOP)/erts/preloaded/ebin/erts_internal.beam
	$(gen_verbose)LANG=C $(PERL) ../utils/make_preload -old $^ > $@

# Regenerate when configure changes
$(GENERATE): configure

.PHONY : generate
ifdef VOID_EMULATOR
generate:
	@echo $(VOID_EMULATOR)' - omitted target generate'
else
generate: $(TTF_DIR)/GENERATED $(PRELOAD_SRC)

$(TTF_DIR)/GENERATED: $(GENERATE)
	$(gen_verbose)echo $? >$(TTF_DIR)/GENERATED
endif

CFLAGS += -MMD -MP

# We don't want any stray printfs or mallocs breaking things, but we don't want
# to include "sys.h" or otherwise mess with portability.
INTERNAL_LIB_CFLAGS = $(CFLAGS) -include epiphany_alloc_redirect.h \
	-include epiphany_io_redirect.h

# ----------------------------------------------------------------------
# Pattern rules
#
COMMON_INCLUDES = -Iinclude -Ibeam -Isys -I../sys/common -I thread -I$(TARGET)
COMMON_INCLUDES += -I../hipe
COMMON_INCLUDES += -I../../include -I../../include/$(TARGET)
COMMON_INCLUDES += -I../../include/internal -I../../include/internal/$(TARGET)

INCLUDES  =  -I$(TTF_DIR) $(COMMON_INCLUDES)

# Usually the same as the default rule, but certain platforms (e.g. win32) mix
# different compilers
$(OBJDIR)/beam_emu.o: beam/beam_emu.c
	$(V_EMU_CC) $(subst -O2, $(GEN_OPT_FLGS), $(CFLAGS)) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: beam/%.c
	$(V_CC) $(subst -O2, $(GEN_OPT_FLGS), $(CFLAGS)) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: $(TARGET)/%.c
	$(V_CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: $(TTF_DIR)/%.c
	$(V_CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: sys/%.c
	$(V_CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: ../sys/common/%.c
	$(V_CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: $(ERL_TOP)/erts/lib_src/$(ETHR_THR_LIB_BASE_DIR)/%.c
	$(V_CC) $(INTERNAL_LIB_CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: $(ERL_TOP)/erts/lib_src/common/%.c
	$(V_CC) $(INTERNAL_LIB_CFLAGS) $(INCLUDES) -c $< -o $@

# We have to do this rigmarole in order to avoid header files we have overridden
# being included, since the compiler always searches the source file directory
# first.

override copy=$(patsubst ../beam/%.c,src_copied/%.c,$<)
$(OBJDIR)/%.o: ../beam/%.c
	$(V_at)cp $< $(copy)
	$(V_CC) $(subst -O2, $(GEN_OPT_FLGS), $(CFLAGS)) $(INCLUDES) -c $(copy) -o $@

# A phony rule to make sure deletion of copied source files does not abort a
# build. This rule does not serve any other purpose than to make make happy. The
# file it creates is immediately overwritten by the rule above.
src_copied/%.c: ../beam/%.c
	$(V_at)cp $< $@

# ----------------------------------------------------------------------
# Object files
#

INIT_OBJS = $(OBJDIR)/erl_main.o	$(PRELOAD_OBJ)

EMU_OBJS = \
	$(OBJDIR)/beam_emu.o		$(OBJDIR)/beam_opcodes.o \
	$(OBJDIR)/beam_catches.o	$(OBJDIR)/beam_debug.o \
	$(OBJDIR)/beam_ranges.o

#	$(OBJDIR)/beam_debug.o		$(OBJDIR)/beam_bp.o \
#	$(OBJDIR)/code_ix.o \

RUN_OBJS = \
	$(OBJDIR)/erl_gc.o \
	$(OBJDIR)/erl_alloc_stub.o \
	$(OBJDIR)/erl_arith.o		$(OBJDIR)/erl_bif_guard.o \
	$(OBJDIR)/erl_bif_op.o		$(OBJDIR)/bif.o \
	$(OBJDIR)/bif_stubs.o		$(OBJDIR)/erl_bif_lists.o \
	$(OBJDIR)/big.o			$(OBJDIR)/utils.o \
	$(OBJDIR)/copy.o		$(OBJDIR)/erl_term.o \
	$(OBJDIR)/erl_bits.o		$(OBJDIR)/erl_process.o \
	$(OBJDIR)/erl_message.o \
	$(OBJDIR)/erl_init.o		$(OBJDIR)/erl_printf_term.o \
	$(OBJDIR)/erl_debug.o		$(OBJDIR)/erl_cpu_topology.o \
	$(OBJDIR)/erl_lock_count.o	$(OBJDIR)/erl_lock_check.o \
	$(OBJDIR)/erl_process_lock.o	$(OBJDIR)/erl_thr_progress.o \
	$(OBJDIR)/io.o			$(OBJDIR)/erl_time_sup.o \
	$(OBJDIR)/erl_bif_table.o	$(OBJDIR)/erl_bif_wrap.o \
	$(OBJDIR)/erl_bif_epiphany.o	$(OBJDIR)/export.o \
	$(OBJDIR)/beam_load.o		$(OBJDIR)/hash.o \
	$(OBJDIR)/index.o		$(OBJDIR)/module.o \
	$(OBJDIR)/atom.o		$(OBJDIR)/erl_map.o \
	$(OBJDIR)/erl_node_tables.o	$(OBJDIR)/erl_process_dict.o \
	$(OBJDIR)/erl_unicode.o		$(OBJDIR)/binary.o \
	$(OBJDIR)/erl_math.o		$(OBJDIR)/external.o

OS_OBJS = \
	$(OBJDIR)/elib_memmove.o	$(OBJDIR)/sys.o \
	$(OBJDIR)/epiphany.o		$(OBJDIR)/sys_alloc.o

#	$(OBJDIR)/driver_tab.o \

SLAVE_OBJS = \
	$(OBJDIR)/slave_bif.o \
	$(OBJDIR)/slave_binary.o \
	$(OBJDIR)/slave_command.o \
	$(OBJDIR)/slave_fifo.o \
	$(OBJDIR)/slave_io.o \
	$(OBJDIR)/slave_refc.o \
	$(OBJDIR)/slave_state.o


OS_OBJS += $(OBJDIR)/sys_float.o

HIPE_ARCH64_OBJS=$(OBJDIR)/hipe_bif64.o

HIPE_x86_OS_OBJS=$(HIPE_x86_$(OPSYS)_OBJS)
HIPE_x86_OBJS=$(OBJDIR)/hipe_x86.o $(OBJDIR)/hipe_x86_glue.o $(OBJDIR)/hipe_x86_bifs.o $(OBJDIR)/hipe_x86_signal.o $(OBJDIR)/hipe_x86_stack.o $(HIPE_x86_OS_OBJS)
HIPE_amd64_OBJS=$(OBJDIR)/hipe_amd64.o $(OBJDIR)/hipe_amd64_glue.o $(OBJDIR)/hipe_amd64_bifs.o $(OBJDIR)/hipe_x86_signal.o $(OBJDIR)/hipe_x86_stack.o $(HIPE_ARCH64_OBJS)
HIPE_ultrasparc_OBJS=$(OBJDIR)/hipe_sparc.o $(OBJDIR)/hipe_sparc_glue.o $(OBJDIR)/hipe_sparc_bifs.o $(OBJDIR)/hipe_risc_stack.o
HIPE_ppc_OBJS=$(OBJDIR)/hipe_ppc.o $(OBJDIR)/hipe_ppc_glue.o $(OBJDIR)/hipe_ppc_bifs.o $(OBJDIR)/hipe_risc_stack.o
HIPE_ppc64_OBJS=$(HIPE_ppc_OBJS) $(HIPE_ARCH64_OBJS)
HIPE_arm_OBJS=$(OBJDIR)/hipe_arm.o $(OBJDIR)/hipe_arm_glue.o $(OBJDIR)/hipe_arm_bifs.o $(OBJDIR)/hipe_risc_stack.o
HIPE_epiphany_OBJS=$(OBJDIR)/hipe_epiphany.o $(OBJDIR)/hipe_epiphany_glue.o $(OBJDIR)/hipe_epiphany_bifs.o $(OBJDIR)/hipe_risc_stack.o
HIPE_noarch_OBJS=
HIPE_ARCH_OBJS=$(HIPE_$(ARCH)_OBJS)

HIPE_OBJS= \
	$(OBJDIR)/hipe_bif1.o \
	$(OBJDIR)/hipe_bif2.o \
	$(OBJDIR)/hipe_debug.o \
	$(OBJDIR)/hipe_gc.o \
	$(OBJDIR)/hipe_mode_switch.o \
	$(OBJDIR)/hipe_native_bif.o \
	$(OBJDIR)/hipe_stack.o $(HIPE_ARCH_OBJS)
ifdef USE_PERFCTR
HIPE_OBJS += $(OBJDIR)/hipe_perfctr.o
endif

BASE_OBJS = $(RUN_OBJS) $(EMU_OBJS) $(OS_OBJS) $(SLAVE_OBJS) $(HIPE_OBJS)

OBJS = $(BASE_OBJS) $(ERTS_INTERNAL_LIB_OBJS)

# Objects we've already built have .d-files, so they do not need to rely on
# GENERATED
BUILT_DEPS := $(wildcard $(OBJDIR)/*.o)
UNBUILT_OBJS := $(filter-out $(BUILT_DEPS:.d=.o),$(OBJS) $(INIT_OBJS) )

$(UNBUILT_OBJS): $(TTF_DIR)/GENERATED

########################################
# HiPE section

M4FLAGS += -DTARGET=$(TARGET) -DOPSYS=$(OPSYS) -DARCH=$(ARCH)

$(TTF_DIR)/%.S: ../hipe/%.m4
	$(m4_verbose)m4 $(M4FLAGS) $< > $@

$(TTF_DIR)/%.h: ../hipe/%.m4
	$(m4_verbose)m4 $(M4FLAGS) $< > $@

$(OBJDIR)/%.o: $(TTF_DIR)/%.S
	$(V_CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: ../hipe/%.S
	$(V_CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: ../hipe/%.c
	$(V_CC) $(subst O2,O3, $(CFLAGS)) $(INCLUDES) -c $< -o $@

$(BINDIR)/hipe_mkliterals$(TF_MARKER):	$(OBJDIR)/hipe_mkliterals.o
	$(ld_verbose)$(CC) $(CFLAGS) $(INCLUDES) -o $@ $< -Wl,-T sys/p16_legacy_hack2.ldf

# XXX: This is quite the horrid way of doing it
$(OBJDIR)/hipe_mkliterals.o: ../hipe/hipe_mkliterals.c $(HIPE_ASM) \
	$(TTF_DIR)/erl_alloc_types.h $(TTF_DIR)/OPCODES-GENERATED \
	$(TARGET)/TABLES-GENERATED
	$(V_CC) $(CFLAGS) -DEPIPHANY_NO_WRITE_REDIRECT \
		-DEPIPHANY_NO_ALLOC_REDIRECT \
		$(INCLUDES) -c ../hipe/hipe_mkliterals.c -o $@

$(TTF_DIR)/hipe_literals.h:	$(BINDIR)/hipe_mkliterals$(TF_MARKER)
	$(gen_verbose)e-run --e-external-fetch $(BINDIR)/hipe_mkliterals$(TF_MARKER) -c > $@ && \
		[ -s $@ ] || (ret=$$?; rm -f $@ && exit $$ret)


$(OBJDIR)/hipe_x86_glue.o:	../hipe/hipe_x86_glue.S \
	$(TTF_DIR)/hipe_x86_asm.h $(TTF_DIR)/hipe_literals.h \
	../hipe/hipe_mode_switch.h
$(TTF_DIR)/hipe_x86_bifs.S:	../hipe/hipe_x86_bifs.m4 \
	../hipe/hipe_x86_asm.m4 ../hipe/hipe_bif_list.m4 \
	$(TARGET)/erl_bif_list.h ../hipe/hipe_gbif_list.h
$(OBJDIR)/hipe_x86_bifs.o:	$(TTF_DIR)/hipe_x86_bifs.S \
	$(TTF_DIR)/hipe_literals.h

$(OBJDIR)/hipe_amd64_glue.o:	../hipe/hipe_amd64_glue.S \
	$(TTF_DIR)/hipe_amd64_asm.h $(TTF_DIR)/hipe_literals.h \
	../hipe/hipe_mode_switch.h
$(TTF_DIR)/hipe_amd64_bifs.S:	../hipe/hipe_amd64_bifs.m4 \
	../hipe/hipe_amd64_asm.m4 ../hipe/hipe_bif_list.m4 \
	$(TARGET)/erl_bif_list.h ../hipe/hipe_gbif_list.h
$(OBJDIR)/hipe_amd64_bifs.o:	$(TTF_DIR)/hipe_amd64_bifs.S \
	$(TTF_DIR)/hipe_literals.h

$(OBJDIR)/hipe_sparc_glue.o:	../hipe/hipe_sparc_glue.S \
	$(TTF_DIR)/hipe_sparc_asm.h ../hipe/hipe_mode_switch.h \
	$(TTF_DIR)/hipe_literals.h
$(TTF_DIR)/hipe_sparc_bifs.S:	../hipe/hipe_sparc_bifs.m4 \
	../hipe/hipe_sparc_asm.m4 ../hipe/hipe_bif_list.m4 \
	$(TARGET)/erl_bif_list.h ../hipe/hipe_gbif_list.h
$(OBJDIR)/hipe_sparc_bifs.o:	$(TTF_DIR)/hipe_sparc_bifs.S \
	$(TTF_DIR)/hipe_literals.h

$(OBJDIR)/hipe_ppc_glue.o:	../hipe/hipe_ppc_glue.S \
	$(TTF_DIR)/hipe_ppc_asm.h ../hipe/hipe_mode_switch.h \
	$(TTF_DIR)/hipe_literals.h
$(TTF_DIR)/hipe_ppc_bifs.S:	../hipe/hipe_ppc_bifs.m4 \
	../hipe/hipe_ppc_asm.m4 ../hipe/hipe_bif_list.m4 \
	$(TARGET)/erl_bif_list.h ../hipe/hipe_gbif_list.h
$(OBJDIR)/hipe_ppc_bifs.o:	$(TTF_DIR)/hipe_ppc_bifs.S \
	$(TTF_DIR)/hipe_literals.h

$(OBJDIR)/hipe_arm_glue.o:	../hipe/hipe_arm_glue.S \
	$(TTF_DIR)/hipe_arm_asm.h ../hipe/hipe_mode_switch.h \
	$(TTF_DIR)/hipe_literals.h
$(TTF_DIR)/hipe_arm_bifs.S:	../hipe/hipe_arm_bifs.m4 \
	../hipe/hipe_arm_asm.m4 ../hipe/hipe_bif_list.m4 \
	$(TARGET)/erl_bif_list.h ../hipe/hipe_gbif_list.h
$(OBJDIR)/hipe_arm_bifs.o:	$(TTF_DIR)/hipe_arm_bifs.S \
	$(TTF_DIR)/hipe_literals.h

$(OBJDIR)/hipe_epiphany_glue.o:	../hipe/hipe_epiphany_glue.S \
	$(TTF_DIR)/hipe_epiphany_asm.h ../hipe/hipe_mode_switch.h \
	$(TTF_DIR)/hipe_literals.h
$(TTF_DIR)/hipe_epiphany_bifs.S: ../hipe/hipe_epiphany_bifs.m4 \
	../hipe/hipe_epiphany_asm.m4 $(TTF_DIR)/hipe_literals.h \
	../hipe/hipe_bif_list.m4 $(TARGET)/erl_bif_list.h \
	../hipe/hipe_gbif_list.h
$(OBJDIR)/hipe_epiphany_bifs.o:	$(TTF_DIR)/hipe_epiphany_bifs.S \
	$(TTF_DIR)/hipe_literals.h

# end of HiPE section
########################################

# ----------------------------------------------------------------------
# The emulator itself
#
## XXX ETODO: Hardcoded to P16 to avoid relocation issue
$(BINDIR)/$(EMULATOR_EXECUTABLE): $(INIT_OBJS) $(OBJS) $(DEPLIBS)
	$(ld_verbose)$(PURIFY) $(LD) -o $(BINDIR)/$(EMULATOR_EXECUTABLE) \
	$(HIPEBEAMLDFLAGS) $(LDFLAGS) $(INIT_OBJS) $(OBJS) $(LIBS) \
	-T sys/p16_legacy_hack2.ldf

$(BINDIR)/$(EMULATOR_EXECUTABLE).srec: $(BINDIR)/$(EMULATOR_EXECUTABLE)
	$(V_OBJCOPY) --srec-forceS3 --output-target srec $< $@

# ----------------------------------------------------------------------
# Dependencies
#
Makefile: Makefile.in config.status configure info.mk
	$(gen_verbose) ./config.status --file=Makefile

info.mk: info.mk.in config.status configure
	$(gen_verbose) ./config.status --file=info.mk

include/config.h: config.h.in
	$(gen_verbose) ./config.status

include/erl_int_sizes_config.h: ../../include/erl_int_sizes_config.h.in
	$(gen_verbose) ./config.status

config.status configure: configure.in
	@echo
	@echo "configure.in has been updated, please re-run autoreconf and configure"
	@echo
	@exit 1

.PHONY: $(TARGET)/gen_git_version.mk
$(TARGET)/gen_git_version.mk:
# We touch beam/erl_bif.info.c if we regenerated the git version to force a
# rebuild.
	$(gen_verbose)
	$(V_at)if ../utils/gen_git_version $@; then touch beam/erl_bif_info.c; fi

.PHONY: depend
depend:

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),generate)
ifndef VOID_EMULATOR
include $(wildcard $(OBJDIR)/*.d)
endif
endif
endif
